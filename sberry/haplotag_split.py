#!/usr/bin/env python3

import sys,os,argparse,gzip
import pysam


def eprint(*args, **kwargs):
        print(*args, file=sys.stderr, **kwargs)

def main(argv=None):
    parser = argparse.ArgumentParser()
    parser.add_argument('-b','--haplotag-bam', dest='bamFile', required=True, help='input BAM file generated by whatshap haplotag')
    parser.add_argument('-f','--force', dest='force', action='store_true', help='force execution even if output directory exists and is not empty')
    parser.add_argument('--outdir', dest='outDir', required=True, help='output directory for gzipped FASTA files')
    opt = parser.parse_args()

    validParameters=True
    if not os.path.isfile(opt.bamFile):
        validParameters=False
        eprint(f'-b|--haplotag-bam file "{opt.bamFile}" does not exist.')
    if os.path.isdir(opt.outDir) and len(os.listdir(opt.outDir))!=0 and not opt.force:
        validParameters=False
        eprint(f'output directory "{opt.outDir}" is not empty, use --force to overwrite output files')
    if not validParameters:
        return 1

    if not os.path.isdir(opt.outDir):
        os.makedirs(opt.outDir,exist_ok=True)
    
    # TODO: handle output file better as there is the risk to open too many of them.
    # A possible solution is to keep a queue
    
    eprint(f'parsing haplotag-bam file and writing sequences.')
    outFileDict={}
    lastReference=None
    with pysam.AlignmentFile(opt.bamFile,'rb') as inBam:
        for read in inBam:
            if read.is_unmapped or read.is_secondary or read.is_supplementary:
                continue
            if lastReference != read.reference_name: # close file related to previos reference
                lastReference=read.reference_name
                for ofh in outFileDict.values():
                    ofh.close()
            if read.has_tag('PS'):
                psid=read.get_tag('PS')
                hapid=read.get_tag('HP')
                ofid=f'{read.reference_name}_{psid}_h{hapid}'
                if not ofid in outFileDict:
                    ofname=ofid+'.fa.gz'
                    outFileDict[ofid]=gzip.open(os.path.join(opt.outDir,ofname),'wt')
                ofh=outFileDict[ofid]
                ofh.write(f'>{read.query_name}\n')
                ofh.write(f'{read.query_sequence}\n')
                #ofh.write('+\n')
                #ofh.write(''.join([chr(q+33) for q in read.query_qualities])+'\n')
    
    eprint(f'closing remaining output files.')
    for ofh in outFileDict.values():
        ofh.close()

    return 0

# Check if the program is not being imported
if __name__ == "__main__":
    sys.exit(main())

